from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

# === –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ ===
AMERICANO, CAPPUCCINO, FLATWHITE, TO_KITCHEN, FROM_KITCHEN = range(5)

# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ—Å—á–∏—Ç–∞–µ–º –∫–æ—Ñ–µ ‚òï\n–°–∫–æ–ª—å–∫–æ –∞–º–µ—Ä–∏–∫–∞–Ω–æ?"
    )
    return AMERICANO

# === –í–æ–ø—Ä–æ—Å 1 ===
async def americano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["americano"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∫–∞–ø—É—á–∏–Ω–æ?")
    return CAPPUCCINO

# === –í–æ–ø—Ä–æ—Å 2 ===
async def cappuccino(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["cappuccino"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ñ–ª–µ—Ç–≤–∞–π—Ç?")
    return FLATWHITE

# === –í–æ–ø—Ä–æ—Å 3 ===
async def flatwhite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["flatwhite"] = update.message.text
    skip_button = [[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è")]]
    await update.message.reply_text(
        "–ß—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–æ—Å—å –Ω–∞ –∫—É—Ö–Ω—é?",
        reply_markup=ReplyKeyboardMarkup(skip_button, one_time_keyboard=True, resize_keyboard=True)
    )
    return TO_KITCHEN

# === –í–æ–ø—Ä–æ—Å 4 ===
async def to_kitchen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    context.user_data["to_kitchen"] = None if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è" else text

    skip_button = [[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è")]]
    await update.message.reply_text(
        "–ß—Ç–æ –±—Ä–∞–ª–∏ —Å –∫—É—Ö–Ω–∏?",
        reply_markup=ReplyKeyboardMarkup(skip_button, one_time_keyboard=True, resize_keyboard=True)
    )
    return FROM_KITCHEN

# === –í–æ–ø—Ä–æ—Å 5 –∏ –ò—Ç–æ–≥–∏ ===
async def from_kitchen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    context.user_data["from_kitchen"] = None if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è" else text

    # === –ü–æ–¥—Å—á—ë—Ç ===
    try:
        americano = int(context.user_data.get("americano", 0))
        cappuccino = int(context.user_data.get("cappuccino", 0))
        flatwhite = int(context.user_data.get("flatwhite", 0))
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã ‚òï")
        return ConversationHandler.END

    total_coffee = americano + cappuccino + flatwhite

    # === –†–∞—Å—á—ë—Ç –º–æ–ª–æ–∫–∞ ===
    milk_total = cappuccino * 150 + flatwhite * 120

    # === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
    result = f"‚òï –ö–æ—Ñ–µ —à—Ç–∞—Ç: {total_coffee} —à—Ç.\n"
    result += f"ü•õ –ú–æ–ª–æ–∫–æ: {milk_total} –º–ª\n"

    if context.user_data.get("to_kitchen"):
        result += f"üç≥ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –∫—É—Ö–Ω—é: {context.user_data['to_kitchen']}\n"
        if context.user_data.get("from_kitchen"):
            result += f"üçΩ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∞—Ä: {context.user_data['from_kitchen']}"
    else:
        result += f"üçΩ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∞—Ä: {context.user_data.get('from_kitchen', '-')}"

    # === –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" ===
    restart_button = [[KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ")]]
    await update.message.reply_text(
        result,
        reply_markup=ReplyKeyboardMarkup(restart_button, one_time_keyboard=True, resize_keyboard=True)
    )
    return ConversationHandler.END

# === –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ===
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω–∞—á–∞–ª–∞
    return await start(update, context)

# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    import os
    app = ApplicationBuilder().token(os.getenv("TOKEN")).build()

    conv = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ$"), restart)
    ],
    states={
        AMERICANO: [MessageHandler(filters.TEXT & ~filters.COMMAND, americano)],
        CAPPUCCINO: [MessageHandler(filters.TEXT & ~filters.COMMAND, cappuccino)],
        FLATWHITE: [MessageHandler(filters.TEXT & ~filters.COMMAND, flatwhite)],
        TO_KITCHEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, to_kitchen)],
        FROM_KITCHEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, from_kitchen)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã Render —É–≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
    t = threading.Thread(target=run_web, daemon=True)
    t.start()
    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()



