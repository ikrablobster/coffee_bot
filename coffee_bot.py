import threading
import os
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

def run_web():
    app = Flask("keepalive")
    @app.route("/")
    def index():
        return "ok"
    port = int(os.environ.get("PORT", 8000))
    app.run(host="0.0.0.0", port=port)

# === –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ ===
AMERICANO, CAPPUCCINO, FLATWHITE, TO_KITCHEN, FROM_KITCHEN = range(5)

# –ö–Ω–æ–ø–∫–∏
def base_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠"), KeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÅ")]],
        resize_keyboard=True
    )

# --- –°—Ç–∞—Ä—Ç ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚òïÔ∏è –î–∞–≤–∞–π –ø—Ä–æ—Å—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –∫–æ—Ñ–µ –∏ –º–æ–ª–æ–∫–∞!\n\n"
        "–°–∫–æ–ª—å–∫–æ –∞–º–µ—Ä–∏–∫–∞–Ω–æ?",
        reply_markup=base_keyboard()
    )
    return AMERICANO

# --- 1. –ê–º–µ—Ä–∏–∫–∞–Ω–æ ---
async def americano(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠":
        context.user_data["americano"] = 0
    elif text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÅ":
        return await restart(update, context)
    else:
        context.user_data["americano"] = int(text)

    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –∫–∞–ø—É—á–∏–Ω–æ?",
        reply_markup=base_keyboard()
    )
    return CAPPUCCINO

# --- 2. –ö–∞–ø—É—á–∏–Ω–æ ---
async def cappuccino(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠":
        context.user_data["cappuccino"] = 0
    elif text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÅ":
        return await restart(update, context)
    else:
        context.user_data["cappuccino"] = int(text)

    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ —Ñ–ª–µ—Ç–≤–∞–π—Ç?",
        reply_markup=base_keyboard()
    )
    return FLATWHITE

# --- 3. –§–ª–µ—Ç–≤–∞–π—Ç ---
async def flatwhite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠":
        context.user_data["flatwhite"] = 0
    elif text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÅ":
        return await restart(update, context)
    else:
        context.user_data["flatwhite"] = int(text)

    await update.message.reply_text(
        "–ß—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–æ—Å—å –Ω–∞ –∫—É—Ö–Ω—é?",
        reply_markup=base_keyboard()
    )
    return TO_KITCHEN

# --- 4. –ù–∞ –∫—É—Ö–Ω—é ---
async def to_kitchen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠":
        context.user_data["to_kitchen"] = None
    elif text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÅ":
        return await restart(update, context)
    else:
        context.user_data["to_kitchen"] = text

    await update.message.reply_text(
        "–ß—Ç–æ –±—Ä–∞–ª–æ—Å—å —Å –∫—É—Ö–Ω–∏?",
        reply_markup=base_keyboard()
    )
    return FROM_KITCHEN

# --- 5. –° –∫—É—Ö–Ω–∏ ---
async def from_kitchen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠":
        context.user_data["from_kitchen"] = None
    elif text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÅ":
        return await restart(update, context)
    else:
        context.user_data["from_kitchen"] = text

    # --- –ü–æ–¥—Å—á—ë—Ç ---
    americano = context.user_data.get("americano", 0)
    cappuccino = context.user_data.get("cappuccino", 0)
    flatwhite = context.user_data.get("flatwhite", 0)

    total_coffee = americano + cappuccino + flatwhite
    total_milk = cappuccino * 150 + flatwhite * 120

    result = f"‚òïÔ∏è –ö–æ—Ñ–µ: {total_coffee} —à—Ç.\nü•õ –ú–æ–ª–æ–∫–æ: {total_milk} –º–ª\n"

    if context.user_data.get("to_kitchen"):
        result += f"üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –∫—É—Ö–Ω—é: {context.user_data['to_kitchen']}\n"
    if context.user_data.get("from_kitchen"):
        result += f"üçΩ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∞—Ä: {context.user_data['from_kitchen']}\n"

    await update.message.reply_text(result, reply_markup=base_keyboard())
    return ConversationHandler.END

# --- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ---
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üîÅ –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ!\n\n–°–∫–æ–ª—å–∫–æ –∞–º–µ—Ä–∏–∫–∞–Ω–æ?",
        reply_markup=base_keyboard()
    )
    return AMERICANO

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(os.getenv("TOKEN")).build()

    conv = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ$"), restart)
    ],
    states={
        AMERICANO: [MessageHandler(filters.TEXT & ~filters.COMMAND, americano)],
        CAPPUCCINO: [MessageHandler(filters.TEXT & ~filters.COMMAND, cappuccino)],
        FLATWHITE: [MessageHandler(filters.TEXT & ~filters.COMMAND, flatwhite)],
        TO_KITCHEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, to_kitchen)],
        FROM_KITCHEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, from_kitchen)],
    },
    fallbacks=[CommandHandler("start", start)],
    )
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã Render —É–≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
    t = threading.Thread(target=run_web, daemon=True)
    t.start()
    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()






